x-airflow-common: 
  &airflow-common
  build:
      context: ../4_pipelines
      dockerfile: Dockerfile  # Use Dockerfile.airflow for this service
  env_file:
    - .env  # Load environment variables from .env file
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor  # Use LocalExecutor for Airflow
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow  # PostgreSQL connection string
    AIRFLOW__CORE__FERNET_KEY: ''  # Fernet encryption key (left empty here)
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'  # Dags will be paused when created
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'  # Do not load example DAGs
    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 10  # Minimum interval for scheduler file processing
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'True'  # Enable XCom pickling
  volumes:
    - ../0_all_in_one/dags:/opt/airflow/dags # Mount local dags directory to Airflow container
    - ../5_model_deployment/logs:/opt/airflow/logs  # Mount logs directory to Airflow container
    - ../5_model_deployment/plugins:/opt/airflow/plugins  # Mount plugins directory to Airflow container
    - ../5_model_deployment/var/run/docker.sock:/var/run/docker.sock  # Allow Docker socket access for Airflow
  group_add:
    - "${DOCKER_GID}"  # Add Docker group for permission handling
  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"  # Use specified or default user IDs
  depends_on:
    postgres:
      condition: service_healthy  # Wait for PostgreSQL service to be healthy
  networks:
    - custom_network  # Attach to custom network

services:
  jupyter_main:
    build:
      context: ../1_containerization
      dockerfile: Dockerfile
      args:
        USER_ID: ${USER_ID:-1000}
        GROUP_ID: ${GROUP_ID:-1000}
    ports:
      - "8888:8888"
    volumes:
      - ..:/app
      - ../3_experiment_tracking/mlruns:/mlflow-server/artifacts  # Монтируем артефакты
    environment:
      - JUPYTER_TOKEN=password
    user: "${USER_ID}:${GROUP_ID}"

  mlflow:
    build:
      context: ../3_experiment_tracking
      dockerfile: Dockerfile.mlflow
    ports:
      - "5000:5000"
    volumes:
      - ../3_experiment_tracking/mlruns:/mlflow-server

  # Unified Airflow Stack для Tasks 4 и 5 (с единым Airflow UI на порту 8080)
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 3
    restart: always
    networks:
     - custom_network 

  airflow-webserver:
    <<: *airflow-common  # Inherit settings from common Airflow config
    command: webserver  # Run Airflow webserver
    ports:
      - 8080:8080  # Expose webserver port
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]  # Health check for webserver
      interval: 30s  # Check every 10 seconds
      timeout: 10s  # Timeout after 5 seconds
      retries: 5  # Retry once before failing
      start_period: 30s
    restart: always  # Restart always on failure

  airflow_scheduler:
    <<: *airflow-common  # Inherit settings from common Airflow config
    command: scheduler  # Run Airflow scheduler
    restart: always  # Restart always on failure

  airflow_init:
    <<: *airflow-common  # Inherit settings from common Airflow config
    command: version  # Run Airflow version command to initialize
    environment:
      <<: *airflow-common-env  # Include common environment settings
      _AIRFLOW_DB_UPGRADE: 'true'  # Upgrade the database on startup
      _AIRFLOW_WWW_USER_CREATE: 'true'  # Create Airflow web user
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}  # Default username for web interface
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}  # Default password for web interface

  # Task 5: Model Deployment API (отдельный сервис)
  api:
    build:
      context: ../5_model_deployment
      dockerfile: Dockerfile.api
    ports:
      - "5001:5000"
    volumes:
      - ../5_model_deployment/src:/src
      - ../5_model_deployment/data:/data
      - ../5_model_deployment/tests:/tests
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5000/"]
      interval: 60s
      timeout: 10s
      retries: 3
    command: ["python", "src/toxicity_detection/app.py"]

  logger:
    image: busybox
    depends_on:
      airflow-webserver:
        condition: service_healthy
      api:
        condition: service_healthy
    command: echo "✅✅✅ All services are ready!"

volumes:
  postgres-db-volume:

networks:
  custom_network:
    driver: bridge